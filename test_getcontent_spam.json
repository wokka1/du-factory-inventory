{
    "slots":{
        "0":{"name":"slot1","type":{"events":[],"methods":[]}},
        "1":{"name":"slot2","type":{"events":[],"methods":[]}},
        "2":{"name":"slot3","type":{"events":[],"methods":[]}},
        "3":{"name":"slot4","type":{"events":[],"methods":[]}},
        "4":{"name":"slot5","type":{"events":[],"methods":[]}},
        "5":{"name":"slot6","type":{"events":[],"methods":[]}},
        "6":{"name":"slot7","type":{"events":[],"methods":[]}},
        "7":{"name":"slot8","type":{"events":[],"methods":[]}},
        "8":{"name":"slot9","type":{"events":[],"methods":[]}},
        "9":{"name":"slot10","type":{"events":[],"methods":[]}},
        "-1":{"name":"unit","type":{"events":[],"methods":[]}},
        "-2":{"name":"construct","type":{"events":[],"methods":[]}},
        "-3":{"name":"player","type":{"events":[],"methods":[]}},
        "-4":{"name":"system","type":{"events":[],"methods":[]}},
        "-5":{"name":"library","type":{"events":[],"methods":[]}}
    },
    "handlers":[
        {"code":"local debugIndex = 0\nlocal function debugPrint(msg)\n    if screen then\n        screen.addText(0, debugIndex * 2.5, 2.5, msg)\n        debugIndex = debugIndex + 1\n    end\n    system.print(msg)\nend\n\n_G.startTime = system.getArkTime()\n_G.debugPrint = debugPrint\n_G.getContentCount = 0\n\nlocal function getElapsed()\n    return string.format(\"%.1f\", system.getArkTime() - _G.startTime)\nend\n_G.getElapsed = getElapsed\n\nlocal container = nil\nfor slot_name, slot in pairs(unit) do\n    if slot_name == \"slot2\" then\n        if type(slot) == \"table\" and slot.getClass then\n            local className = slot.getClass()\n            if string.match(className, \"Container\") then\n                container = slot\n                break\n            end\n        end\n    end\nend\n\nif not container then\n    debugPrint(\"ERROR: No container in slot2\")\n    unit.exit()\nend\n\n_G.container = container\nlocal id = container.getLocalId()\n\ndebugPrint(\"===================================\")\ndebugPrint(\"getContent() SPAM TEST\")\ndebugPrint(\"Testing slot2 (ID \" .. id .. \")\")\ndebugPrint(\"===================================\")\ndebugPrint(\"\")\n\ndebugPrint(\"[\" .. getElapsed() .. \"s] STEP 1: Call updateContent() once\")\nlocal result = container.updateContent()\nif result and result > 0 then\n    debugPrint(\"[\" .. getElapsed() .. \"s] Result: COOLDOWN \" .. string.format(\"%.2f\", result) .. \"s\")\nelse\n    debugPrint(\"[\" .. getElapsed() .. \"s] Result: ACCEPTED (\" .. tostring(result) .. \")\")\nend\n\ndebugPrint(\"[\" .. getElapsed() .. \"s] STEP 2: Waiting 31s for cooldown to expire...\")\ndebugPrint(\"\")\n\nunit.setTimer(\"startSpam\", 31)\nunit.setTimer(\"heartbeat\", 10)\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},
        {"code":"local elapsed = _G.getElapsed()\n_G.debugPrint(\"[\" .. elapsed .. \"s] STEP 3: Starting getContent() spam (every 3s for 180s)\")\n_G.debugPrint(\"\")\n\nunit.setTimer(\"spam\", 0.1)\nunit.setTimer(\"timeout\", 180)","filter":{"args":[{"value":"startSpam"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},
        {"code":"_G.getContentCount = _G.getContentCount + 1\nlocal elapsed = _G.getElapsed()\n\nlocal items = _G.container.getContent()\n\nif #items > 0 then\n    _G.debugPrint(\"\")\n    _G.debugPrint(\"[\" .. elapsed .. \"s] !!! SUCCESS !!!\")\n    _G.debugPrint(\"[\" .. elapsed .. \"s] getContent() returned data after \" .. _G.getContentCount .. \" calls\")\n    _G.debugPrint(\"[\" .. elapsed .. \"s] Items: \" .. #items)\n    \n    for _, item in pairs(items) do\n        local itemData = system.getItem(item.id)\n        _G.debugPrint(\"[\" .. elapsed .. \"s]   - \" .. itemData.displayName .. \" x\" .. item.quantity)\n    end\n    \n    _G.debugPrint(\"\")\n    _G.debugPrint(\"[\" .. elapsed .. \"s] === TEST COMPLETE ===\")\n    _G.debugPrint(\"[\" .. elapsed .. \"s] Data retrieved without onContentUpdate event!\")\n    unit.exit()\nelse\n    if _G.getContentCount % 10 == 0 then\n        _G.debugPrint(\"[\" .. elapsed .. \"s] getContent() call #\" .. _G.getContentCount .. \" - still no data\")\n    end\n    unit.setTimer(\"spam\", 3)\nend","filter":{"args":[{"value":"spam"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},
        {"code":"local elapsed = _G.getElapsed()\nif math.floor(tonumber(elapsed)) % 30 == 0 then\n    _G.debugPrint(\"[\" .. elapsed .. \"s] ... heartbeat (\" .. elapsed .. \"s elapsed)\")\nend\n\nunit.setTimer(\"heartbeat\", 10)","filter":{"args":[{"value":"heartbeat"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},
        {"code":"local elapsed = _G.getElapsed()\n_G.debugPrint(\"\")\n_G.debugPrint(\"[\" .. elapsed .. \"s] === TIMEOUT ===\")\n_G.debugPrint(\"[\" .. elapsed .. \"s] getContent() never returned data\")\n_G.debugPrint(\"[\" .. elapsed .. \"s] Total getContent() calls: \" .. _G.getContentCount)\n_G.debugPrint(\"\")\n_G.debugPrint(\"[\" .. elapsed .. \"s] CONCLUSION: getContent() alone doesn't work\")\n_G.debugPrint(\"[\" .. elapsed .. \"s] onContentUpdate events are required (but unreliable)\")\nunit.exit()","filter":{"args":[{"value":"timeout"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"}
    ],
    "methods":[],
    "events":[]
}
