{
    "slots":{
        "0":{"name":"slot1","type":{"events":[],"methods":[]}},
        "1":{"name":"slot2","type":{"events":[],"methods":[]}},
        "2":{"name":"slot3","type":{"events":[],"methods":[]}},
        "3":{"name":"slot4","type":{"events":[],"methods":[]}},
        "4":{"name":"slot5","type":{"events":[],"methods":[]}},
        "5":{"name":"slot6","type":{"events":[],"methods":[]}},
        "6":{"name":"slot7","type":{"events":[],"methods":[]}},
        "7":{"name":"slot8","type":{"events":[],"methods":[]}},
        "8":{"name":"slot9","type":{"events":[],"methods":[]}},
        "9":{"name":"slot10","type":{"events":[],"methods":[]}},
        "-1":{"name":"unit","type":{"events":[],"methods":[]}},
        "-2":{"name":"construct","type":{"events":[],"methods":[]}},
        "-3":{"name":"player","type":{"events":[],"methods":[]}},
        "-4":{"name":"system","type":{"events":[],"methods":[]}},
        "-5":{"name":"library","type":{"events":[],"methods":[]}}
    },
    "handlers":[
        {"code":"local debugIndex = 0\nlocal function debugPrint(msg)\n    if screen then\n        screen.addText(0, debugIndex * 2.5, 2.5, msg)\n        debugIndex = debugIndex + 1\n    end\n    system.print(msg)\nend\n\nlocal startTime = system.getArkTime()\nlocal function getElapsed()\n    return string.format(\"%.1fs\", system.getArkTime() - startTime)\nend\n\n_G.debugPrint = debugPrint\n_G.getElapsed = getElapsed\n_G.eventCount = 0\n_G.testContainer = nil\n_G.testSlotKey = nil\n\ndebugPrint(\"===================================\")\ndebugPrint(\"ContainerHub/Group Test\")\ndebugPrint(\"===================================\")\ndebugPrint(\"\")\n\n-- Search for ContainerHub or ContainerGroup (like original code)\nlocal found = false\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\" and slot.getClass then\n        local className = slot.getClass()\n        -- Match pattern: Container + letters + Group\n        if string.match(className, \"Container%a+Group\") then\n            _G.testContainer = slot\n            _G.testSlotKey = slot_name\n            local id = slot.getLocalId()\n            debugPrint(\"Found: \" .. slot_name)\n            debugPrint(\"Class: \" .. className)\n            debugPrint(\"ID: \" .. id)\n            debugPrint(\"\")\n            found = true\n            break\n        end\n    end\nend\n\nif not found then\n    debugPrint(\"ERROR: No ContainerHub/Group found!\")\n    debugPrint(\"This test requires a ContainerHub or\")\n    debugPrint(\"ContainerGroup element in a slot.\")\n    debugPrint(\"\")\n    debugPrint(\"Check your hardware setup.\")\n    unit.exit()\nend\n\n-- Test 1: Call updateContent\ndebugPrint(\"[\" .. getElapsed() .. \"] Calling updateContent()...\")\nlocal result = _G.testContainer.updateContent()\ndebugPrint(\"[\" .. getElapsed() .. \"] Result: \" .. tostring(result))\nif result and result > 0 then\n    debugPrint(\"[\" .. getElapsed() .. \"] COOLDOWN: \" .. string.format(\"%.2f\", result) .. \"s\")\nelse\n    debugPrint(\"[\" .. getElapsed() .. \"] ACCEPTED!\")\nend\ndebugPrint(\"\")\n\n-- Test 2: Monitor for onContentUpdate\ndebugPrint(\"[\" .. getElapsed() .. \"] Monitoring for onContentUpdate...\")\ndebugPrint(\"[\" .. getElapsed() .. \"] Waiting 35 seconds...\")\ndebugPrint(\"[\" .. getElapsed() .. \"] Event handler registered for: \" .. _G.testSlotKey)\ndebugPrint(\"\")\n\nunit.setTimer(\"finish\", 35)\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},
        {"code":"_G.eventCount = _G.eventCount + 1\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >>> onContentUpdate EVENT #\" .. _G.eventCount .. \" <<<\")\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >>> THIS FIRED! ContainerHub events work!\")\n_G.debugPrint(\"\")\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Calling getContent()...\")\nlocal items = _G.testContainer.getContent()\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Items: \" .. #items)\nif #items > 0 then\n    for _, item in pairs(items) do\n        local itemData = system.getItem(item.id)\n        _G.debugPrint(\"[\" .. _G.getElapsed() .. \"]   - \" .. itemData.displayName .. \" x\" .. item.quantity)\n    end\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] SUCCESS!\")\nelse\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] No items yet\")\nend\n_G.debugPrint(\"\")","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"0"},"key":"1"},
        {"code":"_G.eventCount = _G.eventCount + 1\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >>> onContentUpdate EVENT #\" .. _G.eventCount .. \" <<<\")\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >>> THIS FIRED! ContainerHub events work!\")\n_G.debugPrint(\"\")\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Calling getContent()...\")\nlocal items = _G.testContainer.getContent()\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Items: \" .. #items)\nif #items > 0 then\n    for _, item in pairs(items) do\n        local itemData = system.getItem(item.id)\n        _G.debugPrint(\"[\" .. _G.getElapsed() .. \"]   - \" .. itemData.displayName .. \" x\" .. item.quantity)\n    end\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] SUCCESS!\")\nelse\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] No items yet\")\nend\n_G.debugPrint(\"\")","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"1"},"key":"2"},
        {"code":"_G.eventCount = _G.eventCount + 1\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >>> onContentUpdate EVENT #\" .. _G.eventCount .. \" <<<\")\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >>> THIS FIRED! ContainerHub events work!\")\n_G.debugPrint(\"\")\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Calling getContent()...\")\nlocal items = _G.testContainer.getContent()\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Items: \" .. #items)\nif #items > 0 then\n    for _, item in pairs(items) do\n        local itemData = system.getItem(item.id)\n        _G.debugPrint(\"[\" .. _G.getElapsed() .. \"]   - \" .. itemData.displayName .. \" x\" .. item.quantity)\n    end\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] SUCCESS!\")\nelse\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] No items yet\")\nend\n_G.debugPrint(\"\")","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"2"},"key":"3"},
        {"code":"_G.eventCount = _G.eventCount + 1\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >>> onContentUpdate EVENT #\" .. _G.eventCount .. \" <<<\")\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >>> THIS FIRED! ContainerHub events work!\")\n_G.debugPrint(\"\")\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Calling getContent()...\")\nlocal items = _G.testContainer.getContent()\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Items: \" .. #items)\nif #items > 0 then\n    for _, item in pairs(items) do\n        local itemData = system.getItem(item.id)\n        _G.debugPrint(\"[\" .. _G.getElapsed() .. \"]   - \" .. itemData.displayName .. \" x\" .. item.quantity)\n    end\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] SUCCESS!\")\nelse\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] No items yet\")\nend\n_G.debugPrint(\"\")","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"3"},"key":"4"},
        {"code":"_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Test timeout reached\")\n_G.debugPrint(\"\")\n_G.debugPrint(\"=== RESULTS ===\")\n_G.debugPrint(\"onContentUpdate events fired: \" .. _G.eventCount)\n_G.debugPrint(\"\")\nif _G.eventCount > 0 then\n    _G.debugPrint(\"SUCCESS! ContainerHub/Group events work!\")\n    _G.debugPrint(\"The original code should work with your setup.\")\nelse\n    _G.debugPrint(\"FAILED: Event never fired\")\n    _G.debugPrint(\"Even ContainerHub doesn't trigger events.\")\n    _G.debugPrint(\"The API may be completely broken.\")\nend\n_G.debugPrint(\"===================================\")\nunit.exit()","filter":{"args":[{"value":"finish"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"5"}
    ],
    "methods":[],
    "events":[]
}
