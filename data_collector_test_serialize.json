{
    "slots":{
        "0":{"name":"slot1","type":{"events":[],"methods":[]}},
        "1":{"name":"slot2","type":{"events":[],"methods":[]}},
        "2":{"name":"slot3","type":{"events":[],"methods":[]}},
        "3":{"name":"slot4","type":{"events":[],"methods":[]}},
        "4":{"name":"slot5","type":{"events":[],"methods":[]}},
        "5":{"name":"slot6","type":{"events":[],"methods":[]}},
        "6":{"name":"slot7","type":{"events":[],"methods":[]}},
        "7":{"name":"slot8","type":{"events":[],"methods":[]}},
        "8":{"name":"slot9","type":{"events":[],"methods":[]}},
        "9":{"name":"slot10","type":{"events":[],"methods":[]}},
        "-1":{"name":"unit","type":{"events":[],"methods":[]}},
        "-2":{"name":"construct","type":{"events":[],"methods":[]}},
        "-3":{"name":"player","type":{"events":[],"methods":[]}},
        "-4":{"name":"system","type":{"events":[],"methods":[]}},
        "-5":{"name":"library","type":{"events":[],"methods":[]}}
    },
    "handlers":[
        {"code":"local slots = {}\nslots.containers = {}\n\nlocal debugIndex = 0\nlocal debugFontSize = 2.5\nlocal function debugPrint(msg)\n    if screen then\n        screen.addText(0, debugIndex * debugFontSize, debugFontSize, msg)\n        debugIndex = debugIndex + 1\n    end\n    system.print(msg)\nend\n\nlocal startTime = system.getArkTime()\nlocal function getElapsed()\n    return string.format(\"%.1fs\", system.getArkTime() - startTime)\nend\n\n-- Find containers in slots 7 and 8\nfor slot_name, slot in pairs(unit) do\n    if slot_name == \"slot7\" or slot_name == \"slot8\" then\n        if type(slot) == \"table\" and slot.getClass then\n            local className = slot.getClass()\n            if string.match(className, \"Container\") then\n                slots.containers[slot_name] = slot\n                debugPrint(\"Found \" .. slot_name .. \": Container ID \" .. slot.getLocalId())\n            end\n        end\n    end\nend\n\n-- Create ordered list of containers to test\nlocal containerList = {}\nif slots.containers.slot7 then\n    table.insert(containerList, {name = \"slot7\", container = slots.containers.slot7})\nend\nif slots.containers.slot8 then\n    table.insert(containerList, {name = \"slot8\", container = slots.containers.slot8})\nend\n\nif #containerList == 0 then\n    debugPrint(\"ERROR: No containers found in slot7 or slot8\")\n    unit.exit()\nend\n\ndebugPrint(\"===================================\")\ndebugPrint(\"Testing \" .. #containerList .. \" containers\")\ndebugPrint(\"===================================\")\n\n_G.currentIndex = 0\n_G.containerList = containerList\n_G.debugPrint = debugPrint\n_G.getElapsed = getElapsed\n_G.heartbeatCount = 0\n\nfunction _G.processNextContainer()\n    _G.currentIndex = _G.currentIndex + 1\n    \n    if _G.currentIndex > #_G.containerList then\n        debugPrint(\"===================================\")\n        debugPrint(\"[\" .. getElapsed() .. \"] All containers tested!\")\n        debugPrint(\"===================================\")\n        unit.stopTimer(\"beat\")\n        unit.exit()\n        return\n    end\n    \n    local info = _G.containerList[_G.currentIndex]\n    debugPrint(\"\")\n    debugPrint(\"[\" .. getElapsed() .. \"] --- Testing \" .. info.name .. \" (ID: \" .. info.container.getLocalId() .. \") ---\")\n    \n    -- Start by requesting update\n    _G.requestUpdate()\nend\n\nfunction _G.requestUpdate()\n    local info = _G.containerList[_G.currentIndex]\n    local container = info.container\n    local id = container.getLocalId()\n    \n    debugPrint(\"[\" .. getElapsed() .. \"] Calling updateContent()...\")\n    local updateResult = container.updateContent()\n    \n    if updateResult and updateResult > 0 then\n        -- On cooldown - wait and retry\n        local waitTime = math.ceil(updateResult) + 1\n        debugPrint(\"[\" .. getElapsed() .. \"] Result: \" .. string.format(\"%.2f\", updateResult) .. \"s (ON COOLDOWN)\")\n        debugPrint(\"[\" .. getElapsed() .. \"] Setting timer 'retry' for \" .. waitTime .. \"s...\")\n        unit.setTimer(\"retry\", waitTime)\n    else\n        -- Request accepted\n        debugPrint(\"[\" .. getElapsed() .. \"] Result: \" .. tostring(updateResult) .. \" (ACCEPTED)\")\n        debugPrint(\"[\" .. getElapsed() .. \"] Setting timer 'get' for 3s...\")\n        unit.setTimer(\"get\", 3)\n    end\nend\n\nfunction _G.getCurrentContent()\n    local info = _G.containerList[_G.currentIndex]\n    local container = info.container\n    local id = container.getLocalId()\n    \n    debugPrint(\"[\" .. getElapsed() .. \"] Calling getContent()...\")\n    local itemsList = container.getContent()\n    debugPrint(\"[\" .. getElapsed() .. \"] Items returned: \" .. #itemsList)\n    \n    if #itemsList > 0 then\n        for _, item in pairs(itemsList) do\n            local itemData = system.getItem(item.id)\n            debugPrint(\"[\" .. getElapsed() .. \"]   - \" .. itemData.displayName .. \" x\" .. item.quantity)\n        end\n        debugPrint(\"[\" .. getElapsed() .. \"] SUCCESS: Container has data!\")\n    else\n        debugPrint(\"[\" .. getElapsed() .. \"] FAILED: No data returned\")\n    end\n    \n    -- Move to next container\n    _G.processNextContainer()\nend\n\n-- Start heartbeat for debugging\nunit.setTimer(\"beat\", 5)\n\n-- Start the test\ndebugPrint(\"[\" .. getElapsed() .. \"] *** TEST VERSION 4 - NO RETRY updateContent() ***\")\ndebugPrint(\"[\" .. getElapsed() .. \"] Heartbeat every 5s\")\ndebugPrint(\"\")\n_G.processNextContainer()\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},
        {"code":"_G.heartbeatCount = _G.heartbeatCount + 1\n_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >> HEARTBEAT #\" .. _G.heartbeatCount)\nunit.setTimer(\"beat\", 5)","filter":{"args":[{"value":"beat"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},
        {"code":"_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >> Cooldown expired, getting content...\")\n_G.getCurrentContent()","filter":{"args":[{"value":"retry"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},
        {"code":"_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] >> GET timer fired\")\n_G.getCurrentContent()","filter":{"args":[{"value":"get"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"}
    ],
    "methods":[],
    "events":[]
}
