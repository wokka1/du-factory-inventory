{
    "slots":{
        "0":{"name":"databank","type":{"events":[],"methods":[]}},
        "1":{"name":"core","type":{"events":[],"methods":[]}},
        "2":{"name":"screen","type":{"events":[],"methods":[]}},
        "-1":{"name":"unit","type":{"events":[],"methods":[]}},
        "-2":{"name":"construct","type":{"events":[],"methods":[]}},
        "-3":{"name":"player","type":{"events":[],"methods":[]}},
        "-4":{"name":"system","type":{"events":[],"methods":[]}},
        "-5":{"name":"library","type":{"events":[],"methods":[]}}
    },
    "handlers":[
        {"code":"local Utilities = _G.Utilities\nlocal InventoryCommon = _G.InventoryCommon\n\nlocal slots = {}\nslots.databank = databank\nslots.core = core\nslots.screen = screen\n\nlocal module = \"core-databank-debug\"\nslots.databank = Utilities.loadSlot(slots.databank, \"DataBankUnit\", nil, module, \"databank\")\nslots.core = Utilities.loadSlot(slots.core, {\"CoreUnitDynamic\", \"CoreUnitStatic\", \"CoreUnitSpace\"}, nil, module, \"core\")\nslots.screen = Utilities.loadSlot(slots.screen, \"ScreenUnit\", nil, module, \"screen\", true)\n\nif slots.screen then\n    slots.screen.setHTML(\"\")\n    slots.screen.activate()\nend\n\nlocal debugIndex = 0\nlocal debugFontSize = 2.5\nlocal function debugPrint(msg)\n    if slots.screen then\n        slots.screen.addText(0, debugIndex * debugFontSize, debugFontSize, msg)\n        debugIndex = debugIndex + 1\n    end\n    system.print(msg)\nend\n\ndebugPrint(\"===== CORE vs DATABANK DEBUG =====\")\ndebugPrint(\"\")\n\n-- Get all container IDs from databank\nlocal containerIds = {}\nlocal keys = slots.databank.getKeyList()\nfor _, key in ipairs(keys) do\n    if string.match(key, \"%.c$\") then\n        local itemName = string.gsub(key, \"%.c$\", \"\")\n        local idList = InventoryCommon.jsonToIntList(slots.databank.getStringValue(key))\n        debugPrint(\"Item: \" .. itemName .. \" has \" .. #idList .. \" container(s)\")\n        for _, id in ipairs(idList) do\n            table.insert(containerIds, {item = itemName, id = id})\n        end\n    end\nend\n\ndebugPrint(\"\")\ndebugPrint(\"Total containers in databank: \" .. #containerIds)\ndebugPrint(\"\")\ndebugPrint(\"--- CHECKING CORE ACCESS ---\")\n\nlocal foundCount = 0\nlocal notFoundCount = 0\nlocal zeroMassCount = 0\n\nfor _, entry in ipairs(containerIds) do\n    local id = entry.id\n    local itemName = entry.item\n    \n    -- Query core for this container\n    local displayName = slots.core.getElementDisplayNameById(id)\n    local elementName = slots.core.getElementNameById(id)\n    local mass = slots.core.getElementMassById(id)\n    \n    if displayName == \"\" then\n        debugPrint(\"c.\" .. id .. \" (\" .. itemName .. \"): NOT FOUND IN CORE\")\n        notFoundCount = notFoundCount + 1\n    elseif mass == 0 then\n        debugPrint(\"c.\" .. id .. \" (\" .. itemName .. \"): FOUND but mass=0 (name: \" .. displayName .. \")\")\n        zeroMassCount = zeroMassCount + 1\n    else\n        debugPrint(\"c.\" .. id .. \" (\" .. itemName .. \"): mass=\" .. string.format(\"%.1f\", mass) .. \"kg (\" .. displayName .. \")\")\n        foundCount = foundCount + 1\n    end\n    \n    -- Also check databank container details\n    local containerKey = InventoryCommon.constants.CONTAINER_PREFIX .. id\n    if slots.databank.hasKey(containerKey) == 1 then\n        local details = json.decode(slots.databank.getStringValue(containerKey))\n        local selfMass = details.selfMass or 0\n        local itemMass = mass - selfMass\n        debugPrint(\"  DB: selfMass=\" .. string.format(\"%.1f\", selfMass) .. \"kg, itemMass=\" .. string.format(\"%.1f\", itemMass) .. \"kg, opt=\" .. string.format(\"%.2f\", details.optimization or 0))\n    end\nend\n\ndebugPrint(\"\")\ndebugPrint(\"===== SUMMARY =====\")\ndebugPrint(\"Found with mass: \" .. foundCount)\ndebugPrint(\"Found but zero mass: \" .. zeroMassCount)\ndebugPrint(\"Not found in core: \" .. notFoundCount)\ndebugPrint(\"Total: \" .. #containerIds)\n\nif notFoundCount > 0 then\n    debugPrint(\"\")\n    debugPrint(\"WARNING: Some containers in databank\")\n    debugPrint(\"are not found by core. Run scanner\")\n    debugPrint(\"again or remove stale entries.\")\nend\n\nif zeroMassCount > 0 then\n    debugPrint(\"\")\n    debugPrint(\"WARNING: Some containers have zero mass.\")\n    debugPrint(\"This means empty containers or core\")\n    debugPrint(\"cannot read the mass.\")\nend\n\nunit.exit()\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},
        {"code":"if _G.Utilities then\n    return\nend\n_G.Utilities = {}\n\nlocal SI_PREFIXES = {\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"}\nfunction _G.Utilities.printableNumber(value, units)\n    if not value or value == 0 then\n        return \"0.0\", units\n    end\n\n    local adjustedValue = math.abs(value)\n    local sign = value / adjustedValue\n    local factor = 1\n    while adjustedValue >= 999.5 and factor < #SI_PREFIXES do\n        adjustedValue = adjustedValue / 1000\n        factor = factor + 1\n    end\n\n    if adjustedValue < 9.95 then\n        return string.format(\"%.1f\", sign * math.floor(adjustedValue * 10 + 0.5) / 10), SI_PREFIXES[factor] .. units\n    end\n    return string.format(\"%.0f\", sign * math.floor(adjustedValue + 0.5)), SI_PREFIXES[factor] .. units\nend\n\nfunction _G.Utilities.findFirstSlot(slotClass, exclude)\n    if type(slotClass) ~= \"table\" then\n        slotClass = {slotClass}\n    end\n    exclude = exclude or {}\n\n    for key, value in pairs(unit) do\n\n        for _, exc in pairs(exclude) do\n            if value == exc then\n                goto continueOuter\n            end\n        end\n\n        if value and type(value) == \"table\" and value.getClass then\n            for _, class in pairs(slotClass) do\n                if string.match(value.getClass(), class) ~= nil then\n                    return value, key\n                end\n            end\n        end\n\n        ::continueOuter::\n    end\n\n    return nil, nil\nend\n\nlocal function assertValid(valid, message, screen)\n    if not valid then\n        if screen and screen.setCenteredText and type(screen.setCenteredText) == \"function\" then\n            screen.setCenteredText(message)\n        end\n        error(message)\n    end\nend\n\nfunction _G.Utilities.loadSlot(provided, targetClass, errorScreen, moduleName, mappedSlotName, optional, optionalMessage)\n    if type(targetClass) ~= \"table\" then\n        targetClass = {targetClass}\n    end\n    local slotName\n\n    local typedSlot = provided\n    if not (typedSlot and type(typedSlot) == \"table\" and typedSlot.getClass) then\n        typedSlot, slotName = _G.Utilities.findFirstSlot(targetClass)\n        if not optional then\n            assertValid(typedSlot, string.format(\"%s: %s link not found.\", moduleName, mappedSlotName), errorScreen)\n        end\n\n        if typedSlot then\n            system.print(string.format(\"Slot %s mapped to %s %s.\", slotName, moduleName, mappedSlotName))\n        elseif optionalMessage and string.len(optionalMessage) > 0 then\n            system.print(string.format(\"%s: %s\", moduleName, optionalMessage))\n        end\n    else\n        local class = typedSlot.getClass()\n        local valid = false\n        for _, tClass in pairs(targetClass) do\n            valid = valid or class == tClass\n        end\n        assertValid(valid, string.format(\"%s %s slot is of type: %s\", moduleName, mappedSlotName, class), errorScreen)\n    end\n    return typedSlot\nend\n\nlocal useParameterSettings = false\n_G.Utilities.USE_PARAMETER_SETTINGS = useParameterSettings\n\nfunction _G.Utilities.getPreference(databank, key, defaultValue)\n    local isBool = type(defaultValue) == \"boolean\"\n    local isNumber = type(defaultValue) == \"number\"\n    local prefValue\n\n    if databank then\n        if databank.hasKey(key) == 1 and not _G.Utilities.USE_PARAMETER_SETTINGS then\n            if isBool then\n                prefValue = databank.getIntValue(key) == 1\n            elseif isNumber then\n                prefValue = databank.getFloatValue(key)\n            else\n                prefValue = databank.getStringValue(key)\n            end\n        else\n            prefValue = defaultValue\n        end\n\n        if isBool then\n            local storeValue = 0\n            if prefValue then\n                storeValue = 1\n            end\n            databank.setIntValue(key, storeValue)\n        elseif isNumber then\n            databank.setFloatValue(key, tonumber(prefValue))\n        else\n            databank.setStringValue(key, prefValue)\n        end\n    else\n        prefValue = defaultValue\n    end\n\n    return prefValue\nend\n\nreturn _G.Utilities\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"1"},
        {"code":"if _G.InventoryCommon then\n    return\nend\n_G.InventoryCommon = {}\n\nlocal constants = {}\nconstants.SOURCE_CORE_CONTAINER = \"core container\"\nconstants.SOURCE_CONTAINER_VOLUME_ONLY = \"container volume\"\nconstants.CONTAINER_SUFFIX = \".c\"\nconstants.CONTAINER_PREFIX = \"c.\"\n_G.InventoryCommon.constants = constants\n\nfunction _G.InventoryCommon.jsonToIntList(json)\n    local listElements = {}\n\n    for element in string.gmatch(json, \"%d+\") do\n        listElements[#listElements + 1] = tonumber(element)\n    end\n\n    return listElements\nend\n\nfunction _G.InventoryCommon.intListToJson(list)\n    return string.format(\"[%s]\", table.concat(list, \",\"))\nend\n\nlocal CONTAINERS_DB_PATTERN = string.format([[.+%%%s]], constants.CONTAINER_SUFFIX)\nfunction _G.InventoryCommon.removeContainerFromDb(databank, containerId)\n    local containerList, prefix, suffix, replaceText, changed\n    for _, itemContainer in pairs(databank.getKeyList()) do\n        if not string.match(itemContainer, CONTAINERS_DB_PATTERN) then\n            goto continue\n        end\n        containerList = databank.getStringValue(itemContainer)\n\n        changed = false\n        repeat\n            prefix, suffix = string.match(containerList, \"(%D)%s*\" .. containerId .. \"%s*(%D)\")\n            if not prefix then\n                break\n            end\n\n            if prefix == suffix then\n                replaceText = prefix\n            elseif prefix == \",\" then\n                replaceText = suffix\n            elseif suffix == \",\" then\n                replaceText = prefix\n            elseif prefix == \"[\" and suffix == \"]\" then\n                replaceText = \"[]\"\n            end\n\n            if prefix == \"[\" then\n                prefix = \"%[\"\n            end\n\n            containerList = string.gsub(containerList, prefix .. containerId .. suffix, replaceText)\n            changed = true\n        until not prefix\n\n        if changed then\n            databank.setStringValue(itemContainer, containerList)\n        end\n\n        ::continue::\n    end\nend\n\nlocal ITEM_CONTAINER_PATTERN = \".-%\" .. constants.CONTAINER_SUFFIX .. \"$\"\nfunction _G.InventoryCommon.validateDb(databank)\n    local keyCount = {}\n    local containerCount = {}\n    for _, key in pairs(databank.getKeyList()) do\n        keyCount[key] = (keyCount[key] or 0) + 1\n\n        if string.match(key, ITEM_CONTAINER_PATTERN) then\n            for _, containerId in pairs(InventoryCommon.jsonToIntList(databank.getStringValue(key))) do\n                containerCount[containerId] = (containerCount[containerId] or 0) + 1\n            end\n        end\n    end\n    for key, count in pairs(keyCount) do\n        if count > 1 then\n            system.print(string.format(\"Duplicate key: %s (%d)\", key, count))\n        end\n    end\n    for containerId, count in pairs(containerCount) do\n        if count > 1 then\n            system.print(string.format(\"Duplicate container mapping: %s (%d)\", containerId, count))\n        end\n    end\nend\n\nreturn _G.InventoryCommon\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"2"}
    ],
    "methods":[],
    "events":[]
}
