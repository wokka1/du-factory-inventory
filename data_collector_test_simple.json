{
    "slots":{
        "0":{"name":"slot1","type":{"events":[],"methods":[]}},
        "1":{"name":"slot2","type":{"events":[],"methods":[]}},
        "2":{"name":"slot3","type":{"events":[],"methods":[]}},
        "3":{"name":"slot4","type":{"events":[],"methods":[]}},
        "4":{"name":"slot5","type":{"events":[],"methods":[]}},
        "5":{"name":"slot6","type":{"events":[],"methods":[]}},
        "6":{"name":"slot7","type":{"events":[],"methods":[]}},
        "7":{"name":"slot8","type":{"events":[],"methods":[]}},
        "8":{"name":"slot9","type":{"events":[],"methods":[]}},
        "9":{"name":"slot10","type":{"events":[],"methods":[]}},
        "-1":{"name":"unit","type":{"events":[],"methods":[]}},
        "-2":{"name":"construct","type":{"events":[],"methods":[]}},
        "-3":{"name":"player","type":{"events":[],"methods":[]}},
        "-4":{"name":"system","type":{"events":[],"methods":[]}},
        "-5":{"name":"library","type":{"events":[],"methods":[]}}
    },
    "handlers":[
        {"code":"local debugIndex = 0\nlocal function debugPrint(msg)\n    if screen then\n        screen.addText(0, debugIndex * 2.5, 2.5, msg)\n        debugIndex = debugIndex + 1\n    end\n    system.print(msg)\nend\n\nlocal startTime = system.getArkTime()\nlocal function getElapsed()\n    return string.format(\"%.1fs\", system.getArkTime() - startTime)\nend\n\n-- Find container in slot 8\nlocal container = nil\nfor slot_name, slot in pairs(unit) do\n    if slot_name == \"slot8\" then\n        if type(slot) == \"table\" and slot.getClass then\n            local className = slot.getClass()\n            if string.match(className, \"Container\") then\n                container = slot\n                debugPrint(\"Found slot8: Container ID \" .. slot.getLocalId())\n                break\n            end\n        end\n    end\nend\n\nif not container then\n    debugPrint(\"ERROR: No container in slot8\")\n    unit.exit()\nend\n\n_G.container = container\n_G.debugPrint = debugPrint\n_G.getElapsed = getElapsed\n_G.step = 1\n\ndebugPrint(\"===================================\")\ndebugPrint(\"SIMPLE TEST - Slot 8 Only\")\ndebugPrint(\"===================================\")\ndebugPrint(\"\")\n\n-- Step 1: First updateContent\ndebugPrint(\"[\" .. getElapsed() .. \"] STEP 1: First updateContent()\")\nlocal result1 = container.updateContent()\ndebugPrint(\"[\" .. getElapsed() .. \"] Result: \" .. tostring(result1))\ndebugPrint(\"\")\ndebugPrint(\"[\" .. getElapsed() .. \"] Waiting 31s for step 2...\")\n\n_G.step = 2\nunit.setTimer(\"next\", 31)\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},
        {"code":"_G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Timer fired, current step: \" .. _G.step)\n\nif _G.step == 2 then\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] STEP 2: Second updateContent()\")\n    local result2 = _G.container.updateContent()\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Result: \" .. tostring(result2))\n    _G.debugPrint(\"\")\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Waiting 31s for step 3...\")\n    _G.step = 3\n    unit.setTimer(\"next\", 31)\n    \nelseif _G.step == 3 then\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] STEP 3: Calling getContent()\")\n    local items = _G.container.getContent()\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Items returned: \" .. #items)\n    \n    if #items > 0 then\n        for _, item in pairs(items) do\n            local itemData = system.getItem(item.id)\n            _G.debugPrint(\"[\" .. _G.getElapsed() .. \"]   - \" .. itemData.displayName .. \" x\" .. item.quantity)\n        end\n        _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] SUCCESS!\")\n    else\n        _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] FAILED: No items\")\n    end\n    \n    _G.debugPrint(\"\")\n    _G.debugPrint(\"===================================\")\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] Test complete\")\n    _G.debugPrint(\"===================================\")\n    unit.exit()\n    \nelse\n    _G.debugPrint(\"[\" .. _G.getElapsed() .. \"] ERROR: Unknown step \" .. _G.step)\n    unit.exit()\nend","filter":{"args":[{"value":"next"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"}
    ],
    "methods":[],
    "events":[]
}
